@IsTest
Public with sharing class Test_MPOT_SearchController{

    
    static testMethod void searchController(){
        MPOT_Setting__c settings = new MPOT_Setting__c();
        settings.name = 'SearchResultStage1';
        settings.Message__c = 'Approve to Scope – Post Gate 1';
        insert settings;
        MPOT_Setting__c settings2 = new MPOT_Setting__c();
        settings2.name = 'SearchResultStage2';
        settings2.Message__c = 'Feasibility/Design – Post Gate 2';
        insert settings2;
        MPOT_Setting__c settings3 = new MPOT_Setting__c();
        settings3.name = 'SearchResultStage3';
        settings3.Message__c = 'Implementation – Post Gate 3';
        insert settings3;
        MPOT_Setting__c settings4 = new MPOT_Setting__c();
        settings4.name = 'SearchResultStage4';
        settings4.Message__c = 'Post Implementation – Regulatory Tracking';
        insert settings4;
        
        MPOT_Gantt_Data_Mapping__c DM = new MPOT_Gantt_Data_Mapping__c();
        DM.ColourClass__c = 'ganttBlue';
        DM.name = 'Implementation';
        insert DM;
        GLBL_User_Settings__c gus = new GLBL_User_Settings__c(MPOT_User_Role__c = 'Test',GLBL_User__c=UserInfo.getUserId(),RecordTypeId=Schema.SobjectType.GLBL_User_Settings__c.getRecordTypeInfosByname().get('MPOT').getRecordTypeId());
        insert gus;
        List<GLBL_Project__c> gp = Test_MPOT_DataFactory.returnProjects(2);
        
        System.assertNotEquals(gp.size(), 0);
        
        gp[0].RecordTypeId = Schema.SobjectType.GLBL_Project__c.getRecordTypeInfosByname().get('MPOT Project').getRecordTypeId();
        gp[0].MPOT_Stage__c = 'On Hold';
        gp[0].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[0].MPOT_Networks_Project_Impacts__c = 'test';
        gp[0].MPOT_Sites__c = 'test';
        gp[0].MPOT_Molecule_Name__c = 'test';
        gp[0].MPOT_Platforms__c = 'test';
        gp[0].MPOT_Regulatory_Impact__c = 'yes';
        gp[1].MPOT_Stage__c = 'Approve to Scope – Post Gate 1';
        gp[1].MPOT_New_Project_Request_Approved__c = true;
        gp[0].MPOT_New_Project_Request_Approved__c = true;
        gp[1].MPOT_Networks_Project_Impacts__c = 'test';
        gp[1].MPOT_Stage__c = 'Feasibility/Design – Post Gate 2';
        gp[1].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[1].MPOT_Sites__c = 'test';
        gp[1].MPOT_Molecule_Name__c = 'test';
        gp[1].MPOT_Platforms__c = 'test';
        gp[1].MPOT_Regulatory_Impact__c = 'yes';
        insert gp;
        MPOT_Project_Milestone__c ProjMil = new  MPOT_Project_Milestone__c ();
        ProjMil.End_date__c = system.today()+ 50;
        ProjMil.Start_date__c = system.today();
        ProjMil.Milestone_name__c = 'Implementation';
        ProjMil.Milestone_detail__c = 'detail';
        ProjMil.Sub_Milestone_name__c = 'sub';
        ProjMil.Project_Name__c =  gp[1].id;
        insert ProjMil;
        Test.StartTest();
        MPOT_SearchController sctrl = new MPOT_SearchController();
      
        sctrl.fromDate = '01/01/2015';
        sctrl.toDate = '01/02/2016';
       sctrl.startDate = '01/01/2015';
        sctrl.endDate = '01/02/2016';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.viewAsReadOnly();
        sctrl.getItems();
        sctrl.networkImpactedName = 'test';
        sctrl.networkName = 'test';
        sctrl.moleculeName = 'test';
        sctrl.platformName = 'test';
        sctrl.regulatoryImp = 'All';
        sctrl.setDate('01/02/2015');
        sctrl.siteName = 'test';
        sctrl.isExcel = true;
        sctrl.isCsv = false;
        sctrl.siteId = '';
        sctrl.moleculeId = '';
        sctrl.platformId = '';
        sctrl.networkId = '';
        sctrl.getRedRecords = null;
        sctrl.lmDate = null;
        sctrl.networkImpactedId = '';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.performSearch();
        sctrl.displaySearch();
        sctrl.displaySearchDate();
        sctrl.displaythirtyDay();
        //sctrl.setDate();
        System.assertNotEquals(gp.size(), 0);
        sctrl.getRedRecords();
        sctrl.getInactiveRecords();
        sctrl.getThirtyDayRecords();
        sctrl.displaySMV();
        sctrl.exportRecords();
        sctrl.export();
        sctrl.displayReport();
        sctrl.showPopUP();
        
        MPOT_SearchController.getMolecules();
        MPOT_SearchController.getSites();
        MPOT_SearchController.getPlatforms();
        MPOT_SearchController.getNetworks();
        
        List<string> prjId = new List<String>();
        prjId.add(gp[0].id);
        prjId.add(gp[1].id);
        MPOT_SearchController.prepareGanttData(prjId);
         System.assertEquals( DM.ColourClass__c, 'ganttBlue');
        MPOT_SearchController.wrapper wrap = new MPOT_SearchController.wrapper();
        wrap.pname ='name';
        wrap.pStage = 'closed';
        wrap.pNumber = '567';
        wrap.pDescription ='Description';
        wrap.pScope ='Scope';
        wrap.pOwner ='owner';
        wrap.pSponsor ='Sponsor';
        wrap.pRecordOwner ='RecordOwner';
        wrap.pNetworksProjectInitiatedFrom ='NetworksProjectInitiatedFrom';
        wrap.pNetworksProjectImpacts  ='etworksProjectImpacts';
        wrap.pSite ='Site';
        wrap.pPlatforms = 'Platforms';
        wrap.pMolecules = 'Molecules';
        wrap.pRegulatoryImpact = 'yes';
        wrap.pProjectDriver  = 'Driver';
        wrap.pCurrentStatus = 'Complte';
        wrap.pChangesIssues = 'Change';
        wrap.pAnchor='Yes';
        wrap.pRegulatoryImpactLevel = 'Minor';
        wrap.MonthlyUpdateDate = System.today()+30;
        MPOT_SearchController.MilestoneAttributesDetails mad = new  MPOT_SearchController.MilestoneAttributesDetails();
        mad.customClass ='c';
        mad.to = 't';
        mad.desc_PH = 'desc';
        mad.frm_PH = 'fromph';
        mad.label = 'label';
        mad.setFromDate('1/2/2015');
        mad.setToDate('3/6/2015');
        MPOT_SearchController.MilestoneDetails md = new MPOT_SearchController.MilestoneDetails();
        md.desc_PH ='dph';
        md.name = 'name';
        test.StopTest();
    }
    
    static testMethod void searchController2(){
        MPOT_Setting__c settings = new MPOT_Setting__c();
        settings.name = 'SearchResultStage1';
        settings.Message__c = 'Approve to Scope – Post Gate 1';
        insert settings;
        MPOT_Setting__c settings2 = new MPOT_Setting__c();
        settings2.name = 'SearchResultStage2';
        settings2.Message__c = 'Feasibility/Design – Post Gate 2';
        insert settings2;
        MPOT_Setting__c settings3 = new MPOT_Setting__c();
        settings3.name = 'SearchResultStage3';
        settings3.Message__c = 'Implementation – Post Gate 3';
        insert settings3;
        MPOT_Setting__c settings4 = new MPOT_Setting__c();
        settings4.name = 'SearchResultStage4';
        settings4.Message__c = 'Post Implementation – Regulatory Tracking';
        insert settings4;
        
        MPOT_Gantt_Data_Mapping__c DM = new MPOT_Gantt_Data_Mapping__c();
        DM.ColourClass__c = 'ganttBlue';
        DM.name = 'Implementation';
        insert DM;
        GLBL_User_Settings__c gus = new GLBL_User_Settings__c(MPOT_User_Role__c = 'Test',GLBL_User__c=UserInfo.getUserId(),RecordTypeId=Schema.SobjectType.GLBL_User_Settings__c.getRecordTypeInfosByname().get('MPOT').getRecordTypeId());
        insert gus;
        List<GLBL_Project__c> gp = Test_MPOT_DataFactory.returnProjects(2);
        System.assertNotEquals(gp.size(), 0);
        gp[0].RecordTypeId = Schema.SobjectType.GLBL_Project__c.getRecordTypeInfosByname().get('MPOT Project').getRecordTypeId();
        gp[0].MPOT_Stage__c = 'On Hold';
        gp[0].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[0].MPOT_Networks_Project_Impacts__c = 'test';
        gp[0].MPOT_Sites__c = 'test';
        gp[0].MPOT_Molecule_Name__c = 'test';
        gp[0].MPOT_Platforms__c = 'test';
        gp[0].MPOT_Regulatory_Impact__c = 'yes';
        gp[1].MPOT_Stage__c = 'Approve to Scope – Post Gate 1';
        gp[1].MPOT_New_Project_Request_Approved__c = true;
        gp[0].MPOT_New_Project_Request_Approved__c = true;
        gp[1].MPOT_Networks_Project_Impacts__c = 'test';
        gp[1].MPOT_Stage__c = 'Feasibility/Design – Post Gate 2';
        gp[1].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[1].MPOT_Sites__c = 'test';
        gp[1].MPOT_Molecule_Name__c = 'test';
        gp[1].MPOT_Platforms__c = 'test';
        gp[1].MPOT_Regulatory_Impact__c = 'yes';
        insert gp;
        MPOT_Project_Milestone__c ProjMil = new  MPOT_Project_Milestone__c ();
        ProjMil.End_date__c = system.today()+ 50;
        ProjMil.Start_date__c = system.today();
        ProjMil.Milestone_name__c = 'Implementation';
        ProjMil.Milestone_detail__c = 'detail';
        ProjMil.Sub_Milestone_name__c = 'sub';
        ProjMil.Project_Name__c =  gp[1].id;
        insert ProjMil;
        Test.StartTest();
        MPOT_SearchController sctrl = new MPOT_SearchController();
      
        sctrl.fromDate = '01/01/2015';
        sctrl.toDate = '01/02/2016';
       sctrl.startDate = '01/01/2015';
        sctrl.endDate = '01/02/2016';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.viewAsReadOnly();
        sctrl.getItems();
        sctrl.networkImpactedName = '';
        sctrl.networkName = '';
        sctrl.moleculeName = '';
        sctrl.platformName = 'test';
        sctrl.regulatoryImp = 'tester';
        sctrl.setDate('01/02/2015');
        sctrl.siteName = '';
        sctrl.isExcel = true;
        sctrl.isCsv = false;
        sctrl.siteId = '';
        sctrl.moleculeId = '';
        sctrl.platformId = '';
        sctrl.networkId = '';
        sctrl.getRedRecords = null;
        sctrl.lmDate = null;
        sctrl.networkImpactedId = '';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        test.StopTest();
    }
    
    static testMethod void searchController3(){
        MPOT_Setting__c settings = new MPOT_Setting__c();
        settings.name = 'SearchResultStage1';
        settings.Message__c = 'Approve to Scope – Post Gate 1';
        insert settings;
        MPOT_Setting__c settings2 = new MPOT_Setting__c();
        settings2.name = 'SearchResultStage2';
        settings2.Message__c = 'Feasibility/Design – Post Gate 2';
        insert settings2;
        MPOT_Setting__c settings3 = new MPOT_Setting__c();
        settings3.name = 'SearchResultStage3';
        settings3.Message__c = 'Implementation – Post Gate 3';
        insert settings3;
        MPOT_Setting__c settings4 = new MPOT_Setting__c();
        settings4.name = 'SearchResultStage4';
        settings4.Message__c = 'Post Implementation – Regulatory Tracking';
        insert settings4;
        
        MPOT_Gantt_Data_Mapping__c DM = new MPOT_Gantt_Data_Mapping__c();
        DM.ColourClass__c = 'ganttBlue';
        DM.name = 'Implementation';
        insert DM;
        GLBL_User_Settings__c gus = new GLBL_User_Settings__c(MPOT_User_Role__c = 'Test',GLBL_User__c=UserInfo.getUserId(),RecordTypeId=Schema.SobjectType.GLBL_User_Settings__c.getRecordTypeInfosByname().get('MPOT').getRecordTypeId());
        insert gus;
        List<GLBL_Project__c> gp = Test_MPOT_DataFactory.returnProjects(2);
        System.assertNotEquals(gp.size(), 0);
        gp[0].RecordTypeId = Schema.SobjectType.GLBL_Project__c.getRecordTypeInfosByname().get('MPOT Project').getRecordTypeId();
        gp[0].MPOT_Stage__c = 'On Hold';
        gp[0].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[0].MPOT_Networks_Project_Impacts__c = 'test';
        gp[0].MPOT_Sites__c = 'test';
        gp[0].MPOT_Molecule_Name__c = 'test';
        gp[0].MPOT_Platforms__c = 'test';
        gp[0].MPOT_Regulatory_Impact__c = 'yes';
        gp[1].MPOT_Stage__c = 'Approve to Scope – Post Gate 1';
        gp[1].MPOT_New_Project_Request_Approved__c = true;
        gp[0].MPOT_New_Project_Request_Approved__c = true;
        gp[1].MPOT_Networks_Project_Impacts__c = 'test';
        gp[1].MPOT_Stage__c = 'Feasibility/Design – Post Gate 2';
        gp[1].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[1].MPOT_Sites__c = 'test';
        gp[1].MPOT_Molecule_Name__c = 'test';
        gp[1].MPOT_Platforms__c = 'test';
        gp[1].MPOT_Regulatory_Impact__c = 'yes';
        insert gp;
        MPOT_Project_Milestone__c ProjMil = new  MPOT_Project_Milestone__c ();
        ProjMil.End_date__c = system.today()+ 50;
        ProjMil.Start_date__c = system.today();
        ProjMil.Milestone_name__c = 'Implementation';
        ProjMil.Milestone_detail__c = 'detail';
        ProjMil.Sub_Milestone_name__c = 'sub';
        ProjMil.Project_Name__c =  gp[1].id;
        insert ProjMil;
        Test.StartTest();
        MPOT_SearchController sctrl = new MPOT_SearchController();
      
        sctrl.fromDate = '01/01/2015';
        sctrl.toDate = '01/02/2016';
       sctrl.startDate = '01/01/2015';
        sctrl.endDate = '01/02/2016';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.viewAsReadOnly();
        sctrl.getItems();
        sctrl.networkImpactedName = '';
        sctrl.networkName = '';
        sctrl.moleculeName = 'test';
        sctrl.platformName = 'test';
        sctrl.regulatoryImp = 'tester';
        sctrl.setDate('01/02/2015');
        sctrl.siteName = '';
        sctrl.isExcel = true;
        sctrl.isCsv = false;
        sctrl.siteId = '';
        sctrl.moleculeId = '';
        sctrl.platformId = '';
        sctrl.networkId = '';
        sctrl.getRedRecords = null;
        sctrl.lmDate = null;
        sctrl.networkImpactedId = '';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        test.StopTest();
    }
    
    static testMethod void searchController4(){
        MPOT_Setting__c settings = new MPOT_Setting__c();
        settings.name = 'SearchResultStage1';
        settings.Message__c = 'Approve to Scope – Post Gate 1';
        insert settings;
        MPOT_Setting__c settings2 = new MPOT_Setting__c();
        settings2.name = 'SearchResultStage2';
        settings2.Message__c = 'Feasibility/Design – Post Gate 2';
        insert settings2;
        MPOT_Setting__c settings3 = new MPOT_Setting__c();
        settings3.name = 'SearchResultStage3';
        settings3.Message__c = 'Implementation – Post Gate 3';
        insert settings3;
        MPOT_Setting__c settings4 = new MPOT_Setting__c();
        settings4.name = 'SearchResultStage4';
        settings4.Message__c = 'Post Implementation – Regulatory Tracking';
        insert settings4;
        
        MPOT_Gantt_Data_Mapping__c DM = new MPOT_Gantt_Data_Mapping__c();
        DM.ColourClass__c = 'ganttBlue';
        DM.name = 'Implementation';
        insert DM;
        GLBL_User_Settings__c gus = new GLBL_User_Settings__c(MPOT_User_Role__c = 'Test',GLBL_User__c=UserInfo.getUserId(),RecordTypeId=Schema.SobjectType.GLBL_User_Settings__c.getRecordTypeInfosByname().get('MPOT').getRecordTypeId());
        insert gus;
        List<GLBL_Project__c> gp = Test_MPOT_DataFactory.returnProjects(2);
        System.assertNotEquals(gp.size(), 0);
        gp[0].RecordTypeId = Schema.SobjectType.GLBL_Project__c.getRecordTypeInfosByname().get('MPOT Project').getRecordTypeId();
        gp[0].MPOT_Stage__c = 'On Hold';
        gp[0].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[0].MPOT_Networks_Project_Impacts__c = 'test';
        gp[0].MPOT_Sites__c = 'test';
        gp[0].MPOT_Molecule_Name__c = 'test';
        gp[0].MPOT_Platforms__c = 'test';
        gp[0].MPOT_Regulatory_Impact__c = 'yes';
        gp[1].MPOT_Stage__c = 'Approve to Scope – Post Gate 1';
        gp[1].MPOT_New_Project_Request_Approved__c = true;
        gp[0].MPOT_New_Project_Request_Approved__c = true;
        gp[1].MPOT_Networks_Project_Impacts__c = 'test';
        gp[1].MPOT_Stage__c = 'Feasibility/Design – Post Gate 2';
        gp[1].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[1].MPOT_Sites__c = 'test';
        gp[1].MPOT_Molecule_Name__c = 'test';
        gp[1].MPOT_Platforms__c = 'test';
        gp[1].MPOT_Regulatory_Impact__c = 'yes';
        insert gp;
        MPOT_Project_Milestone__c ProjMil = new  MPOT_Project_Milestone__c ();
        ProjMil.End_date__c = system.today()+ 50;
        ProjMil.Start_date__c = system.today();
        ProjMil.Milestone_name__c = 'Implementation';
        ProjMil.Milestone_detail__c = 'detail';
        ProjMil.Sub_Milestone_name__c = 'sub';
        ProjMil.Project_Name__c =  gp[1].id;
        insert ProjMil;
        Test.StartTest();
        MPOT_SearchController sctrl = new MPOT_SearchController();
      
        sctrl.fromDate = '01/01/2015';
        sctrl.toDate = '01/02/2016';
       sctrl.startDate = '01/01/2015';
        sctrl.endDate = '01/02/2016';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.viewAsReadOnly();
        sctrl.getItems();
        sctrl.networkImpactedName = '';
        sctrl.networkName = '';
        sctrl.moleculeName = 'test';
        sctrl.platformName = 'test';
        sctrl.regulatoryImp = 'tester';
        sctrl.setDate('01/02/2015');
        sctrl.siteName = 'test';
        sctrl.isExcel = true;
        sctrl.isCsv = false;
        sctrl.siteId = '';
        sctrl.moleculeId = '';
        sctrl.platformId = '';
        sctrl.networkId = '';
        sctrl.getRedRecords = null;
        sctrl.lmDate = null;
        sctrl.networkImpactedId = '';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        test.StopTest();
    }
    
    static testMethod void searchController5(){
        MPOT_Setting__c settings = new MPOT_Setting__c();
        settings.name = 'SearchResultStage1';
        settings.Message__c = 'Approve to Scope – Post Gate 1';
        insert settings;
        MPOT_Setting__c settings2 = new MPOT_Setting__c();
        settings2.name = 'SearchResultStage2';
        settings2.Message__c = 'Feasibility/Design – Post Gate 2';
        insert settings2;
        MPOT_Setting__c settings3 = new MPOT_Setting__c();
        settings3.name = 'SearchResultStage3';
        settings3.Message__c = 'Implementation – Post Gate 3';
        insert settings3;
        MPOT_Setting__c settings4 = new MPOT_Setting__c();
        settings4.name = 'SearchResultStage4';
        settings4.Message__c = 'Post Implementation – Regulatory Tracking';
        insert settings4;
        
        MPOT_Gantt_Data_Mapping__c DM = new MPOT_Gantt_Data_Mapping__c();
        DM.ColourClass__c = 'ganttBlue';
        DM.name = 'Implementation';
        insert DM;
        GLBL_User_Settings__c gus = new GLBL_User_Settings__c(MPOT_User_Role__c = 'Test',GLBL_User__c=UserInfo.getUserId(),RecordTypeId=Schema.SobjectType.GLBL_User_Settings__c.getRecordTypeInfosByname().get('MPOT').getRecordTypeId());
        insert gus;
        List<GLBL_Project__c> gp = Test_MPOT_DataFactory.returnProjects(2);
        System.assertNotEquals(gp.size(), 0);
        gp[0].RecordTypeId = Schema.SobjectType.GLBL_Project__c.getRecordTypeInfosByname().get('MPOT Project').getRecordTypeId();
        gp[0].MPOT_Stage__c = 'On Hold';
        gp[0].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[0].MPOT_Networks_Project_Impacts__c = 'test';
        gp[0].MPOT_Sites__c = 'test';
        gp[0].MPOT_Molecule_Name__c = 'test';
        gp[0].MPOT_Platforms__c = 'test';
        gp[0].MPOT_Regulatory_Impact__c = 'yes';
        gp[1].MPOT_Stage__c = 'Approve to Scope – Post Gate 1';
        gp[1].MPOT_New_Project_Request_Approved__c = true;
        gp[0].MPOT_New_Project_Request_Approved__c = true;
        gp[1].MPOT_Networks_Project_Impacts__c = 'test';
        gp[1].MPOT_Stage__c = 'Feasibility/Design – Post Gate 2';
        gp[1].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[1].MPOT_Sites__c = 'test';
        gp[1].MPOT_Molecule_Name__c = 'test';
        gp[1].MPOT_Platforms__c = 'test';
        gp[1].MPOT_Regulatory_Impact__c = 'yes';
        insert gp;
        MPOT_Project_Milestone__c ProjMil = new  MPOT_Project_Milestone__c ();
        ProjMil.End_date__c = system.today()+ 50;
        ProjMil.Start_date__c = system.today();
        ProjMil.Milestone_name__c = 'Implementation';
        ProjMil.Milestone_detail__c = 'detail';
        ProjMil.Sub_Milestone_name__c = 'sub';
        ProjMil.Project_Name__c =  gp[1].id;
        insert ProjMil;
        Test.StartTest();
        MPOT_SearchController sctrl = new MPOT_SearchController();
      
        sctrl.fromDate = '01/01/2015';
        sctrl.toDate = '01/02/2016';
       sctrl.startDate = '01/01/2015';
        sctrl.endDate = '01/02/2016';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.viewAsReadOnly();
        sctrl.getItems();
        sctrl.networkImpactedName = '';
        sctrl.networkName = 'test';
        sctrl.moleculeName = 'test';
        sctrl.platformName = 'test';
        sctrl.regulatoryImp = 'tester';
        sctrl.setDate('01/02/2015');
        sctrl.siteName = 'test';
        sctrl.isExcel = true;
        sctrl.isCsv = false;
        sctrl.siteId = '';
        sctrl.moleculeId = '';
        sctrl.platformId = '';
        sctrl.networkId = '';
        sctrl.getRedRecords = null;
        sctrl.lmDate = null;
        sctrl.networkImpactedId = '';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        test.StopTest();
    }
    
    static testMethod void searchController6(){
        MPOT_Setting__c settings = new MPOT_Setting__c();
        settings.name = 'SearchResultStage1';
        settings.Message__c = 'Approve to Scope – Post Gate 1';
        insert settings;
        MPOT_Setting__c settings2 = new MPOT_Setting__c();
        settings2.name = 'SearchResultStage2';
        settings2.Message__c = 'Feasibility/Design – Post Gate 2';
        insert settings2;
        MPOT_Setting__c settings3 = new MPOT_Setting__c();
        settings3.name = 'SearchResultStage3';
        settings3.Message__c = 'Implementation – Post Gate 3';
        insert settings3;
        MPOT_Setting__c settings4 = new MPOT_Setting__c();
        settings4.name = 'SearchResultStage4';
        settings4.Message__c = 'Post Implementation – Regulatory Tracking';
        insert settings4;
        
        MPOT_Gantt_Data_Mapping__c DM = new MPOT_Gantt_Data_Mapping__c();
        DM.ColourClass__c = 'ganttBlue';
        DM.name = 'Implementation';
        insert DM;
        GLBL_User_Settings__c gus = new GLBL_User_Settings__c(MPOT_User_Role__c = 'Test',GLBL_User__c=UserInfo.getUserId(),RecordTypeId=Schema.SobjectType.GLBL_User_Settings__c.getRecordTypeInfosByname().get('MPOT').getRecordTypeId());
        insert gus;
        List<GLBL_Project__c> gp = Test_MPOT_DataFactory.returnProjects(2);
        System.assertNotEquals(gp.size(), 0);
        gp[0].RecordTypeId = Schema.SobjectType.GLBL_Project__c.getRecordTypeInfosByname().get('MPOT Project').getRecordTypeId();
        gp[0].MPOT_Stage__c = 'On Hold';
        gp[0].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[0].MPOT_Networks_Project_Impacts__c = 'test';
        gp[0].MPOT_Sites__c = 'test';
        gp[0].MPOT_Molecule_Name__c = 'test';
        gp[0].MPOT_Platforms__c = 'test';
        gp[0].MPOT_Regulatory_Impact__c = 'yes';
        gp[1].MPOT_Stage__c = 'Approve to Scope – Post Gate 1';
        gp[1].MPOT_New_Project_Request_Approved__c = true;
        gp[0].MPOT_New_Project_Request_Approved__c = true;
        gp[1].MPOT_Networks_Project_Impacts__c = 'test';
        gp[1].MPOT_Stage__c = 'Feasibility/Design – Post Gate 2';
        gp[1].MPOT_Network_Project_Initiated_from__c = 'test';
        gp[1].MPOT_Sites__c = 'test';
        gp[1].MPOT_Molecule_Name__c = 'test';
        gp[1].MPOT_Platforms__c = 'test';
        gp[1].MPOT_Regulatory_Impact__c = 'yes';
        insert gp;
        MPOT_Project_Milestone__c ProjMil = new  MPOT_Project_Milestone__c ();
        ProjMil.End_date__c = system.today()+ 50;
        ProjMil.Start_date__c = system.today();
        ProjMil.Milestone_name__c = 'Implementation';
        ProjMil.Milestone_detail__c = 'detail';
        ProjMil.Sub_Milestone_name__c = 'sub';
        ProjMil.Project_Name__c =  gp[1].id;
        insert ProjMil;
        Test.StartTest();
        MPOT_SearchController sctrl = new MPOT_SearchController();
      
        sctrl.fromDate = '01/01/2015';
        sctrl.toDate = '01/02/2016';
       sctrl.startDate = '01/01/2015';
        sctrl.endDate = '01/02/2016';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        sctrl.viewAsReadOnly();
        sctrl.getItems();
        sctrl.networkImpactedName = 'test';
        sctrl.networkName = 'test';
        sctrl.moleculeName = 'test';
        sctrl.platformName = 'test';
        sctrl.regulatoryImp = 'tester';
        sctrl.setDate('01/02/2015');
        sctrl.siteName = 'test';
        sctrl.isExcel = true;
        sctrl.isCsv = false;
        sctrl.siteId = '';
        sctrl.moleculeId = '';
        sctrl.platformId = '';
        sctrl.networkId = '';
        sctrl.getRedRecords = null;
        sctrl.lmDate = null;
        sctrl.networkImpactedId = '';
        sctrl.searchRecordsInactive();
        sctrl.searchRecords();
        test.StopTest();
    }


}
